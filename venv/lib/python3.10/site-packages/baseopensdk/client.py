# Code generated by Lark OpenAPI.

from typing import Optional

from .core import logger
from .core.model import *
from .core.http import Transport
from .api.drive.service import DriveService
from .api.base.service import BaseService


class Client(object):
	def __init__(self) -> None:
		self._config: Optional[Config] = None
		self.drive: Optional[DriveService] = None
		self.base: Optional[BaseService] = None
		

	@staticmethod
	def builder() -> "ClientBuilder":
		return ClientBuilder()

	def request(self, request: BaseRequest, option: RequestOption) -> RawResponse:
		return Transport.execute(self._config, request, option)


class ClientBuilder(object):
	def __init__(self, conf: Config = Config()) -> None:
		self._config: Config = conf

	def app_token(self, app_token: str) -> "ClientBuilder":
			self._config.app_token = app_token
			return self

	def personal_base_token(self, personal_base_token: str) -> "ClientBuilder":
			self._config.personal_base_token = personal_base_token
			return self

	def domain(self, domain: str) -> "ClientBuilder":
		self._config.domain = domain
		return self

	def log_level(self, log_level: LogLevel) -> "ClientBuilder":
		self._config.log_level = log_level
		return self

	def build(self) -> Client:
		client: Client = Client()
		client._config = self._config

		# 初始化日志
		self._init_logger()

		# 初始化 服务
		client.drive = DriveService(self._config)
		client.base = BaseService(self._config)
		
		return client

	def _init_logger(self):
		logger.setLevel(int(self._config.log_level.value))
